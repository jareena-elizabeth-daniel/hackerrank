import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

  public static class Graph {

    Map<Integer, Set<Integer>>g;

    public Graph(int size) {
      g= new HashMap<Integer, Set<Integer>>();
      for(int i = 1; i <= size; i++) {
        g(i, new HashSet<Integer>());
      }
    }

    public void addEdge(int first, int second) {
      g(first).add(second);
      g(second).add(first);
    }

    public int[] shortestReach(int startId) {
      int[] distances = new intg()+1];
      Arrays.fill(distances, -1);

      Set<Integer> visitedNodes   = new HashSet<Integer>();
      Queue<Integer> nodesToVisit = new LinkedList<Integer>();
      nodesToVisit.add(startId);

      distances[startId] = 0;

      while( nodesToVisit.size() > 0) {

        Integer currentNode = nodesToVisit.poll();
        visitedNodes.add(currentNode);

        for( Integer i : g(currentNode)) {
          if( !visitedNodes.contains(i)){
            nodesToVisit.add(i);
            visitedNodes.add(i);
            distances[i] = distances[currentNode] + 1;
          }
        }
      }

      return distances;
    }
  }

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int queries = scanner.nextInt();

    for (int query = 0;  query < queries; query++){
      //Create the graph
      Integer edges = scanner.nextInt();
      Graph graph   = new Graph(edges);
      int m         = scanner.nextInt();

      // read and set edges
      for( int i = 0; i < m; i++) {
        int first  = scanner.nextInt();
        int second = scanner.nextInt();

        // add each edge to the graph
        graph.addEdge(first,second);
      }

      // Find shortest reach from node s
      int startId = scanner.nextInt();
      int[] distances = graph.shortestReach(startId);

      for( int i = 1; i < distances.length ; i++){
        if( i != startId && distances[i] > -1) {
          System.out.printf("%d ",distances[i] * 6);
        } else if( i != startId && distances[i] == -1) {
          System.out.printf("%d ",distances[i]);
        }
      }

      System.out.printf("\n");
    }

    scanner.close();
  }
}