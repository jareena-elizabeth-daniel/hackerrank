package practise;

public class TreeNode {

	private int data;
	private TreeNode leftChild;
	private TreeNode rightChild;
	
	
	
//........................................<Insertion>......................................	
	public void insert(int value)
	{
		if(value==data)
		{
			return;
		}
		if(value<data)
		{
			if(leftChild==null)
			{
				leftChild = new TreeNode(value);
				
			}
			else
			{
				leftChild.insert(value);
			}
			
		}
		else 
		{
			if(rightChild==null)
			{
				rightChild = new TreeNode(value);
				
			}
			else 
			{
				rightChild.insert(value);
			}
			
		}
	}
	//........................................</ Insertion>......................................	
	
	
	//........................................<Access a node >......................................
	
	public TreeNode getNode(int value)
	{
		if(value == data)
			return this;
		
		if(value < data)
		{
			if(leftChild != null)
				return leftChild.getNode(value);
		}
		else
		{
			if(rightChild != null)
				return rightChild.getNode(value);
		}
		return null;
	}
	
	//........................................</Access a node >......................................
	
	
	public int min()
	{
		if(leftChild ==null)
		{
			return data;
		}
		else 
			return leftChild.min();
	}
	
	public int max()
	{
		if(rightChild== null)
			return data;
		else
			return rightChild.max();
	}
	

	//...................................<traversal>.................
	

	public void traverseInorder()
	{
		if(leftChild!= null)
		{
			leftChild.traverseInorder();
		}
		System.out.print("  " + data);
		
		if(rightChild!=null)
		{
			rightChild.traverseInorder();
		}
	}
	
	//...................................</traversal>..................
	
	public TreeNode(int data)
	{
		this.data = data;
	}
	
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public TreeNode getLeftChild() {
		return leftChild;
	}
	public void setLeftChild(TreeNode leftChild) {
		this.leftChild = leftChild;
	}
	public TreeNode getRightChild() {
		return rightChild;
	}
	public void setRightChild(TreeNode rightChild) {
		this.rightChild = rightChild;
	}
	
	@Override
	public String toString() {
		return "data=" + data +  "";
	}

}
//......................................................................................................................................................................................

package practise;

public class Tree {
	
	private TreeNode root;
	
//...................................................................	
	public void insert(int value)
	{
		if(root == null)
			root = new TreeNode(value);
		else
			root.insert(value);
	}
//...................................................................
	
	
	public TreeNode getNode(int value)
	{
		if(root != null)
			return root.getNode(value);
	return null;
	}
//.....................................................................
	
	public void delete(int value)
	{
		root= delete(root,value);
	}
	private TreeNode delete(TreeNode subTreeRoot,int value)
	{
		if(subTreeRoot==null)        //tree being empty
			return subTreeRoot;
	}
//	
//	
//	if(value < subTreeRoot.getData())
//	{
////		subTreeRoot
//	}
//	

//.....................................................................
	public int min()
	{
		if(root != null)
			return root.min();
		
		return Integer.MIN_VALUE;
	}
//.....................................................................	
	public int max()
	{
		if(root != null)
			return root.max();
		
		return Integer.MAX_VALUE;
	}
//.......................................................................	

	public void traverseInorder()
	{
		if(root!=null)
			root.traverseInorder();
	}
	
}
//...................................................................................................................................................................................



package practise;

public class TreeMain {

	public static void main(String[] args) 
	{
		 
		Tree tree1 = new Tree();
		tree1.insert(25);
		tree1.insert(20);
		tree1.insert(15);
		tree1.insert(27);
		tree1.insert(30);
		tree1.insert(29);
		tree1.insert(26);
		tree1.insert(22);
		tree1.insert(32);
		
		
		
		tree1.traverseInorder();
		System.out.println();
		
		System.out.println(tree1.getNode(20));
		System.out.println(tree1.getNode(39));
		System.out.println(tree1.getNode(26));
		
		System.out.println("Min : "+ tree1.min());
		System.out.println("Max: " +tree1.max());
		
	}
	

}
